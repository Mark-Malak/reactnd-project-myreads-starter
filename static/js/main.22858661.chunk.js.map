{"version":3,"sources":["BooksAPI.js","Book.js","BookShelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","Book","handleChange","event","_this","setState","shelf","target","value","props","refresh","bookObj","_this$props","this","title","authors","img","react_default","a","createElement","className","style","width","height","backgroundImage","onChange","defaultValue","disabled","React","Component","BookShelf","shelfTitle","Books","map","book","key","id","src_Book","refresh2","imageLinks","thumbnail","BooksApp","state","query","showSearchPage","currentlyReading","wantToRead","read","searchResult","_this2","method","Object","objectSpread","Content-Type","body","JSON","stringify","ok","Error","BooksAPI","booksReturned","error","catch","console","log","_this3","_this4","i","length","_this5","_this$state","filter","react_router","path","render","react_router_dom","to","type","placeholder","updateQuery","updateShelves","bind","bookExist","exact","src_BookShelf","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.22858661.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => {\r\n    if (res.ok) {\r\n      return res.json();\r\n    } else {\r\n      throw new Error('Something went wrong');\r\n    }\r\n    })\r\n    .then(data => data.books)\r\n","import React from 'react';\r\n\r\nclass Book extends React.Component {\r\n\r\n\r\n    handleChange = (event) => {\r\n        this.setState({shelf:event.target.value})\r\n       // console.log(\"changing \"+this.props.bookObj.title + \"to my current shelf selected is \"+ event.target.value) ;\r\n        this.props.refresh(this.props.bookObj , event.target.value)\r\n    }\r\n\r\n    render() {\r\n        \r\n       const {title , authors , shelf , img  , bookObj } = this.props ; \r\n        return (\r\n\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <div className=\"book-cover\" style={ { width: 128, height: 193, backgroundImage: `url(${img})` }}></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                        <select onChange = {this.handleChange} defaultValue = {shelf ? shelf : 'none'}  >\r\n                            <option value=\"move\" disabled>Move to...</option>\r\n                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            <option value=\"read\">Read</option>\r\n                            <option value=\"none\">None</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\">{title}</div>\r\n                <div className=\"book-authors\">{authors &&(authors.toString())}</div>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n\r\n    }\r\n}\r\nexport default Book","import React from 'react';\r\nimport Book from './Book';\r\nclass BookShelf extends React.Component {\r\n\r\n\r\n    render() {\r\n        const { shelfTitle, Books } = this.props;\r\n        return (\r\n            <div className=\"bookshelf\"  >\r\n                <h2 className=\"bookshelf-title\">{shelfTitle}</h2>\r\n                <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                        {Books.map( (book) => (\r\n                            <li key = {book.id}>\r\n                                <Book bookObj = {book} refresh = {this.props.refresh2} title = {book.title}  authors = {book.authors} shelf = {book.shelf} img = {book.imageLinks ? (book.imageLinks).thumbnail : ''} />\r\n                           </li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default BookShelf","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport BookShelf from './BookShelf'\r\nimport Book from './Book'\r\nimport { Route } from 'react-router-dom'\r\nimport { Link } from 'react-router-dom'\r\nclass BooksApp extends React.Component {\r\n\r\n  state = {\r\n    query: '',\r\n    showSearchPage: false,\r\n    books: [],\r\n    currentlyReading: [],\r\n    wantToRead: [],\r\n    read: [],\r\n    searchResult: []\r\n  }\r\n\r\n  updateQuery(query) {\r\n    this.setState(() => ({\r\n      query: query\r\n    }))\r\n    BooksAPI.search(query).then(\r\n      (booksReturned) => {\r\n        \r\n        // if (!Array.isArray(booksReturned)) {\r\n        //   //reference : https://dev.to/arikaturika/use-this-trick-to-map-over-single-objects-in-javascript-38nb\r\n        //   console.log(\"this single book title is \" + booksReturned.title);\r\n        //   booksReturned = [booksReturned];\r\n        // }\r\n     \r\n        if (booksReturned.error) {\r\n          this.setState(\r\n            {\r\n              searchResult: []\r\n            }\r\n          )\r\n        } else {\r\n          \r\n          this.setState(\r\n            {\r\n              searchResult: booksReturned\r\n            }\r\n          )\r\n        }\r\n\r\n\r\n      }).catch((error) => {\r\n        console.log(error)\r\n        this.setState(\r\n          {\r\n            searchResult: []\r\n          }\r\n        )\r\n      });\r\n\r\n    // const showingBooks = query.trim() === '' \r\n    // ? [] \r\n    // :searchResult.filter((book)=> (\r\n    //   book.title.toLowerCase().includes(query.toLowerCase()) ||\r\n    //   book.authors.map(a => a.toLowerCase()).includes(query.toLowerCase()) \r\n    // ))\r\n  }\r\n\r\n  updateShelves(book, value) {\r\n    BooksAPI.update(book, value).then(() => {\r\n      return BooksAPI.getAll()\r\n    }\r\n    ).then(\r\n      (books) => {\r\n        this.setState(\r\n          {\r\n            books: books\r\n          }\r\n        )\r\n     \r\n      })\r\n\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    BooksAPI.getAll().then(\r\n      (books) => {\r\n        \r\n        this.setState(\r\n          {\r\n            books: books,\r\n            // currentlyReading: books.filter(book => book.shelf === 'currentlyReading'),\r\n            // wantToRead: books.filter(book => book.shelf === 'wantToRead'),\r\n            // read: books.filter(book => book.shelf === 'read'),\r\n          }\r\n        )\r\n\r\n      })\r\n  }\r\n  bookExist(book, books) {\r\n    for (var i = 0; i < books.length; i++) {\r\n      if (book.id === books[i].id) {\r\n        return books[i].shelf;\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const { searchResult, books, query } = this.state;\r\n    const currentlyReading = books.filter(book => book.shelf === 'currentlyReading');\r\n    const wantToRead = books.filter(book => book.shelf === 'wantToRead');\r\n    const read = books.filter(book => book.shelf === 'read');\r\n\r\n\r\n    return (\r\n      <div className=\"app\">\r\n\r\n\r\n        <Route path='/search' render={() => (\r\n          <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n              <Link to='/'>\r\n                <button className=\"close-search\">Close</button>\r\n              </Link>\r\n              <div className=\"search-books-input-wrapper\">\r\n\r\n                <input type=\"text\" placeholder=\"Search by title or author\"\r\n                  value={this.state.query}\r\n                  onChange={(event) => this.updateQuery(event.target.value)}\r\n                />\r\n\r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\">\r\n                {searchResult && searchResult.length >= 1 && (searchResult.map((book) => (\r\n                  <li key={book.id}>\r\n                    <Book bookObj={book} refresh={this.updateShelves.bind(this)} title={book.title} authors={book.authors} shelf={this.bookExist(book, books)} img={book.imageLinks ? (book.imageLinks).thumbnail : ''} />\r\n                  </li>\r\n                )\r\n                )\r\n                )}\r\n\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        )} />\r\n\r\n\r\n\r\n\r\n        <Route exact path='/' render={() => (\r\n          <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <BookShelf refresh2={this.updateShelves.bind(this)} shelfTitle=\"Currently reading\" Books={currentlyReading} />\r\n                <BookShelf refresh2={this.updateShelves.bind(this)} shelfTitle=\"Want to Read\" Books={wantToRead} />\r\n                <BookShelf refresh2={this.updateShelves.bind(this)} shelfTitle=\"Read\" Books={read} />\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <Link to='/search'>\r\n                <button>Add a book</button>\r\n              </Link>\r\n\r\n            </div>\r\n          </div>\r\n        )} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n    <App />\r\n</BrowserRouter>\r\n, document.getElementById('root'))\r\n"],"sourceRoot":""}